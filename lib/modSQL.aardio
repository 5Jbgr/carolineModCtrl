//modSQL 模块数据库
namespace modSQL{
	mods={"id","file_name","character_num","web","describe"};
	mod_types={"INTEGER PRIMARY KEY NOT NULL","VARCHAR(200)","INT","VARCHAR(300)","VARCHAR(500)"};
	characters={"id","name","character_num","star","true_name"};
	character_types={"INTEGER PRIMARY KEY NOT NULL","VARCHAR(20)","INT","CHAR(1)","VARCHAR(20)"};
	
	_translate=null;
	
	get_translate=function(){
		import myutil.config;
		if(not _translate){
			_translate=myutil.config.get_langconfig().get_other("db");
			..table.mix(_translate,{
				id="编号";
				name="文件名";
	    		version="版本";
	    		author="作者";
	    		URL="链接";
	    		category="分类";
	    		tags="标签";
	    		describe="描述";
	    		hash="哈希";
	    		enabled="启用";
	    		image="图片";
			});
		}
		return _translate; 
	}
	
	//数据库文件备份
	import debug.log;
	import time;
	back_up_db=function(){
		import fsys;
		import myutil.config;
		var t=time.now();
		var newest=null;
		var path = null;
		var brt=myutil.config.get_config().db.backup_retention_time;
		t.format="%Y-%m-%d-%H-%M-%S";
		fsys.createDir("/bak",false);
		fsys.enum( "/bak", "*.bak",
			function(dir,filename,fullpath,findData){ 
				if(filename){
		           	var tm=time(filename);
					if(!newest or tm>newest){
						newest,tm=tm,newest;
						path,fullpath=fullpath,path;
					}
					if(tm and ..math.abs(t.diffday(tm))>brt){
		           	    fsys.delete(fullpath);
		           	}
				}
			} 
			,false/*如果此参数为false则忽略子目录*/
		);
		if(brt){
			var bak=..string.format("/bak/modinfo.db-%s.bak",tostring(t))
			fsys.copy("/modinfo.db",bak);
			debug.log.printf("backup modinfo.db to %s",bak);
		}
	}
	
	
	//import myutil;
	import myutil.dlg;

	update_sql=function(_db,new_version,old_version){
		var data = _db.getTable("SELECT * FROM [mod总表] ");
		var _insert=_db.prepare("INSERT INTO [mods] VALUES (NULL,@name,@version,@author,@URL,
		@category,@tags,@describe,@hash,0,@image);");
		debug.log.printf("update db from version %d to version %d",old_version,new_version);
		var mod = {
            name="";//模组文件名
            author="";//作者
            URL="";//网站链接
            category="99-1";//分组编号
            tags="";//标签
            image="";//展示图片
            version="";//版本
            describe="";//描述
            hash="";//哈希校验
            enabled=false;//是否已启用
		}; 
		var err_mod=..table.array();
		for(i=1;#data;1){
			mod.name=data[i].file_name;
			mod.describe=data[i].describe;
			mod.URL=data[i].web;
			mod.tags=data[i].character_num;
			mod.hash=myutil.hash_file(..io.joinpath("/mods",data[i].id,mod.name+".pak"));
			if(#mod.hash==32){
				_insert.step(mod);
				var id=_db.lastInsertRowid();
				var r=..fsys.move(..io.joinpath("/mods",data[i].id,mod.name+".pak"),..io.joinpath("/mods","99/1",id+"_"+mod.name+".pak"));
				if(not r){debug.log.printf("[update db]:move file %s fail,error code=[%d]",mod.name,..fsys.opError);}
			}else {
				..table.push(err_mod,data[i].id);
			}
		}
		debug.log.printf("[update db]:finish")
		if(#err_mod>0){
			myutil.dlg.error_dlg(..string.format("以下文件转换失败(convert field):id=%s", ..table.tostring(err_mod)));
		}else{
			myutil.dlg.success_dlg("所有旧数据全部转换成功(all data have convert to new DB)");
		}
	}
	
	_sql=null;
	get_mod_sql=function(path="\modinfo.db"){
		if(not _sql){
			self._sql=modSQLimpl2(path);
		}
		return self._sql; 
	}
	
	class modSQLimpl{
		ctor(path,mods/*模组信息*/,characters/*角色信息*/){
			import sqlite;
			var _db=sqlite(path);
			if( not _db.existsTable("mod总表") /*是否已存在指定的表*/ ) {  
	    		_db.exec( "CREATE TABLE [mod总表]( id INTEGER PRIMARY KEY NOT NULL,file_name VARCHAR(200),character_num VARCHAR(20),web VARCHAR(300),describe VARCHAR(500));" );
			}  
			if( not _db.existsTable("character_list") ) {  
    			_db.exec( "CREATE TABLE [character_list]( id INTEGER PRIMARY KEY NOT NULL,name VARCHAR(20),character_num INT,star CHAR(1),true_name VARCHAR(20));" );
			}
			var _mods=mods;
			var _characters=characters; 
			var _insert_mod = _db.prepare("INSERT INTO [mod总表] VALUES (null,@file_name,@character_num,@web,@describe);");
			var _insert_character = _db.prepare("INSERT INTO [character_list] VALUES (null,@name,@character,@star,@true_name);");
			var _delete_mod=_db.prepare("DELETE FROM [mod总表] WHERE id=@id;");
			var _delete_character=_db.prepare("DELETE FROM [character_list] WHERE id=@id;");
		};
		_db;
		add_mod=function(mod){
			_insert_mod.step(mod);
			return _db.changes();
		};
		update_mod=function(mod){
			_db.exec("UPDATE [mod总表] SET file_name = @file_name,character_num=@character_num,web=@web,describe=@describe WHERE id = @id;",mod);
			return _db.changes();
		};
		delete_mod=function(mod){
			_delete_mod.step(mod);
			return _db.changes();
		};
		
		rollback=function(){
			_db.rollbackTrans();
		}
		
		
		add_character=function(character){
			return _insert_character.step(character);
		};
		
		update_character=function(character){
			return _db.exec("UPDATE [character_list] SET name = @name,character_num=@character_num,star=@star,true_name=@true_name WHERE id = @id;",character);
		};
		delete_character=function(character){
			return _delete_character.step(character);
		};
		get_mod_table=function(){
			return _db.getTable("SELECT * FROM [mod总表] ");
		};
		get_character_table=function(){
			return _db.getTable("SELECT * FROM [character_list] ");
		};
		get_mod_last=function(){
			return _db.stepQuery("SELECT * FROM [mod总表] ORDER BY id DESC"); 
		}
		
		
		/*对象的所有成员必须用分号分隔*/
	}
	
	class modSQLimpl2{
		ctor(path /*输入构造函数所需要的参数*/ ){
			import sqlite;
			import debug.log;
			var _db = sqlite(path);
			if( not _db.existsTable("mods") ) { 
				debug.log.print("[db]:table [mods] not exist");
	    		_db.exec( "CREATE TABLE [mods](
	      			id INTEGER PRIMARY KEY NOT NULL,
	    			name VARCHAR(200),
	    			version VARCHAR(10),
	    			author VARCHAR(20),
	    			URL VARCHAR(300),
	    			category VARCHAR(16) NOT NULL,
	    			tags VARCHAR(100),
	    			describe VARCHAR(500),
	    			hash CHAR(32) NOT NULL,
	    			enabled BOOLEAN NOT NULL DEFAULT false,
	    			image VARCHAR(200)
	    			);");
			}
			var _insert_mod=_db.prepare("INSERT INTO [mods] VALUES (NULL,
				@name,
				@version,
				@author,
				@URL,
				@category,
				@tags,
				@describe,
				@hash,
				0,
				@image);");
			var _delete_mod = _db.prepare("DELETE FROM [mods] WHERE id=@id;");
			if( not _db.existsTable("images") ) {  
	    		_db.exec( "CREATE TABLE [images]( 
	    			id INTEGER PRIMARY KEY NOT NULL,
	    			ext VARCHAR(10),
	    			hash CHAR(32) NOT NULL);" );
			}
			var _insert_image=_db.prepare("INSERT INTO [images] VALUES (NULL,@ext,@hash);");
			var _delete_image=_db.prepare("DELETE FROM [images] WHERE id=@id;");
			if( not _db.existsTable("version") ) {
				debug.log.print("[db]:table [version] not exist");
	    		_db.exec( "CREATE TABLE [version]( 
	    			id INTEGER PRIMARY KEY NOT NULL,
	    			version VARCHAR(10));" );
	    		_db.exec("INSERT INTO version VALUES(NULL, 2.0 )");
	    		if(_db.existsTable("mod总表")){
	    		    import modSQL;
	    			modSQL.update_sql(_db,2,1);
	    		}
			}
		};
		
		add_mod=function(mod){
			_insert_mod.step(mod);
			return _db.changes(),_db.lastInsertRowid();
		};
		update_mod=function(update_thing,id){
			_db.exec("UPDATE [mods] SET ? WHERE id = ?;",{update_thing;id});
			return _db.changes();
		};
		delete_mod=function(mod){
			_delete_mod.step(mod);
			return _db.changes();
		};
		search_mod_byid=function(id){
			var query = ..string.format("SELECT * FROM [mods] where id = %s;",id);
			return _db.getTable(query); 
		}
		
		search_mod=function(category,...){
			var query = "SELECT * FROM [mods] ORDER BY category;";
			var c={...}
			if(category){
				if(not c[1]){
					query=..string.format("SELECT * FROM [mods] WHERE category LIKE '%s%%' ORDER BY category;",category);
				}else {
					var _st="OR (category LIKE '%s%%')";
					var st="(category LIKE '%s%%') ";
					for(i=1;#c;1){
						st=st++_st;
					}
					query=..string.format("SELECT * FROM [mods] WHERE %s ORDER BY category;",st);
					query=..string.format(query,category,...);
				}	
			}
			//..console.log(query);
			return _db.getTable(query); 
		}
		
		test_modhash=function(hash){
			return _db.getTable("SELECT id FROM [mods] WHERE hash = @hash;",{hash=hash}); 
		}
		
		
		get_latest_insert_mod=function(){
			return _db.lastInsertRowid(); 
		}
		
		
		add_image=function(img){
			_insert_image.step(img);
			return _db.lastInsertRowid();
		}
		
		delete_image=function(id){
			_delete_image.step({"id"=id});
			return _db.changes(); 
		}
		
		search_image=function(hash){
			var r=_db.stepQuery("SELECT * FROM [images] WHERE hash=@hash;",{hash=hash});
			return r; 
		}
		
		all_image=function(){
			return _db.getTable("SELECT * FROM [images] ;"); 
		}
		
		
		rollback=function(){
			_db.rollbackTrans();
		}
	}
	
}
