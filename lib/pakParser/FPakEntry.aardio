//FPakEntry 内部文件信息
import pakParser;
import pakParser.FPakInfo;
class pakParser.FPakEntry {
	ctor(){
		this.Flags=0;
	};
	
	init = function(info,path,Ar,ofs){
		if(type(ofs)!=type.null) this.init_2(info,path,Ar,ofs);
		elseif(Ar) this.init_1(info,path,Ar);
		else this.init_3(info,path);
	}
	
	
	init_1=function(info,path,Ar){
		this.Path = path;
		var startOffset = Ar.offset;
		this.Offset = Ar.readInt64();
		this.CompressedSize = Ar.readInt64();
        this.UncompressedSize = Ar.readInt64();
        this.Size = this.UncompressedSize;
        if (info.version < ..pakParser.FPakInfo.EPakFileVersion.FNameBasedCompressionMethod){
            //Ar.seek(Ar.offset+4);
            var legacyCompressionMethod = Ar.readInt();
            var compressionMethodIndex = 0;
            if (legacyCompressionMethod == ..pakParser.ECompressionFlags.None)
				compressionMethodIndex = 0;
            elseif (legacyCompressionMethod & ..pakParser.ECompressionFlags.ZLIB)
                compressionMethodIndex = 1;
            else if (legacyCompressionMethod & ..pakParser.ECompressionFlags.GZIP)
                compressionMethodIndex = 2;
            else if (legacyCompressionMethod & ..pakParser.ECompressionFlags.Custom)
                compressionMethodIndex = 3; // Oodle, used by Fortnite Mobile until early 2019
            else
                compressionMethodIndex = -1;
			this.CompressionMethod = compressionMethodIndex == -1 ? ..pakParser.CompressionMethod.Unknown : info.CompressionMethods[compressionMethodIndex+1];
        }elseif(not info.IsSubVersion and info.version == ..pakParser.FPakInfo.EPakFileVersion.FNameBasedCompressionMethod){
            this.CompressionMethod = info.CompressionMethods[Ar.readByte()+1];
        }else {
            this.CompressionMethod = info.CompressionMethods[Ar.readInt()+1];
        }
        if (info.version < ..pakParser.FPakInfo.EPakFileVersion.NoTimestamps)
			Ar.seek(Ar.offset+8);
        Ar.seek(Ar.offset+20);
        if (info.version >= ..pakParser.FPakInfo.EPakFileVersion.CompressionEncryption)
        {
            //..console.log(this.CompressionMethod,..pakParser.CompressionMethod.none);
            if (this.CompressionMethod != ..pakParser.CompressionMethod.none)
                this.CompressionBlocks = Ar.readFPakCompressedBlock();
            //..console.dump(Ar);
            this.Flags = Ar.readByte();
            this.CompressionBlockSize = Ar.readInt();
        }
        if (info.version >= ..pakParser.FPakInfo.EPakFileVersion.RelativeChunkOffsets)
        {
            // Convert relative compressed offsets to absolute
            for(k,v in this.CompressionBlocks){
            	v.CompressedStart += this.Offset;
            	v.CompressedEnd += this.Offset;
            }
        }

        this.StructSize = Ar.offset - startOffset;
	};
	
	init_2=function(info,path,data,ofs){
		// UE4 reference: FPakFile::DecodePakEntry()
		var Ar = data;
		Ar.seek(ofs+1);
        var bitfield = Ar.readInt();
        //..console.log(tostring(bitfield,2));
        var compressionBlockSize;
        if ((bitfield & 0x3f) == 0x3f) // flag value to load a field
        {
            compressionBlockSize = Ar.readInt();
        }
        else
        {
            // for backwards compatibility with old paks :
            compressionBlockSize = (bitfield & 0x3f) << 11;
        }
        // Filter out the CompressionMethod.
        this.CompressionMethod = info.CompressionMethods[((bitfield >>> 23) & 0x3f)+1];

        // Test for 32-bit safe values. Grab it, or memcpy the 64-bit value
        // to avoid alignment exceptions on platforms requiring 64-bit alignment
        // for 64-bit variables.
        //
        // Read the Offset.
        var bIsOffset32BitSafe = (bitfield & (1 << 31)) != 0;
        if (bIsOffset32BitSafe)
        {
            this.Offset = Ar.readInt();
        }
        else
        {
            this.Offset = Ar.readInt64(); // Should be ulong
        }
        // Read the UncompressedSize.
        var bIsUncompressedSize32BitSafe = (bitfield & (1 << 30)) != 0;
        if (bIsUncompressedSize32BitSafe)
        {
            this.UncompressedSize = Ar.readInt();
        }
        else
        {
            this.UncompressedSize = Ar.readInt64(); // Should be ulong
        }
        
        this.Size = this.UncompressedSize;

        // Fill in the Size.
        if (this.CompressionMethod != ..pakParser.CompressionMethod.none)
        {
            var bIsSize32BitSafe = (bitfield & (1 << 29)) != 0;
            if (bIsSize32BitSafe)
            {
                this.CompressedSize = Ar.readInt();
            }
            else
            {
                this.CompressedSize = Ar.readInt64();
            }
        }
        else
        {
            // The Size is the same thing as the UncompressedSize when
            // CompressionMethod == CompressionMethod.None.
            this.CompressedSize = this.UncompressedSize;
        }

        // Filter the encrypted flag.
        this.Flags = this.Flags|((bitfield & (1 << 22)) != 0 ? 1 : 0);

        // This should clear out any excess CompressionBlocks that may be valid in the user's
        // passed in entry.
        var compressionBlocksCount = (bitfield >> 6) & 0xffff;
        this.CompressionBlocks = ..table.array(compressionBlocksCount,{CompressedStart=0; CompressedEnd=0});

        this.CompressionBlockSize = 0;
        if (compressionBlocksCount > 0)
        {
            this.CompressionBlockSize = compressionBlockSize;
            // Per the comment in Encode, if compressionBlocksCount == 1, we use UncompressedSize for CompressionBlockSize
            if (compressionBlocksCount == 1)
            {
                this.CompressionBlockSize = this.UncompressedSize;
            }
        }

        // Compute StructSize: each file still have FPakEntry data prepended, and it should be skipped.
        this.StructSize = ..raw.sizeof("long") * 3 + ..raw.sizeof("int") * 2 + 1 + 20;
        // Take into account CompressionBlocks
        if (this.CompressionMethod != ..pakParser.CompressionMethod.none)
            this.StructSize += (..raw.sizeof("int") + compressionBlocksCount * 2 * ..raw.sizeof("long"));
        //..console.log("compressionBlocksCount",compressionBlocksCount,ofs);
        //..console.dump(this);
        // Handle building of the CompressionBlocks array.
        if (compressionBlocksCount == 1 and not this.IsEncrypted())
        {
            // If the number of CompressionBlocks is 1, we didn't store any extra information.
            // Derive what we can from the entry's file offset and size.
            var b = this.CompressionBlocks[1];
            b.CompressedStart = this.Offset + this.StructSize;
            b.CompressedEnd = b.CompressedStart + this.CompressedSize;
        }
        else if (compressionBlocksCount > 0)
        {
            // Alignment of the compressed blocks
            var compressedBlockAlignment = this.IsEncrypted() ? 16 : 1;

            // compressedBlockOffset is the starting offset. Everything else can be derived from there.
            var compressedBlockOffset = this.Offset + this.StructSize;
            for(i=1;compressionBlocksCount;1){
            	var compressedBlock = this.CompressionBlocks[i];
            	var lll= Ar.readInt();
                compressedBlock.CompressedStart = compressedBlockOffset;
                compressedBlock.CompressedEnd = compressedBlockOffset + lll;
                compressedBlockOffset += self.Align(lll,compressedBlockAlignment);
            }
        }
	};
	
	init_3 = function(info,Ar){
		this.Offset = Ar.readInt64();
        this.CompressedSize = Ar.readInt64();
        this.UncompressedSize = Ar.readInt64();
        this.Size = UncompressedSize;
        Ar.seek(Ar.offset+24);/*align to 8 bytes*/
        //Ar.Position += FSHAHash.SIZE + 4 ; //Hash = new FSHAHash(Ar);
        this.CompressionBlocks = self.readArray(Ar,{LONG64 CompressedStart; LONG64 CompressedEnd});
        this.CompressionBlockSize = Ar.readInt();
        this.CompressionMethod = info.CompressionMethods[Ar.readInt()+1];
        this.Flags = Ar.readByte();

        if (info.version >= ..pakParser.FPakInfo.EPakFileVersion.RelativeChunkOffsets)
        {
            // Convert relative compressed offsets to absolute
            for(i=1;#CompressionBlocks;1){
            	CompressionBlocks[i].CompressedStart += this.Offset;
                CompressionBlocks[i].CompressedEnd += this.Offset;
            }
        }

        // Compute StructSize: each file still have FPakEntry data prepended, and it should be skipped.
        this.StructSize = ..raw.sizeof("long") * 3 + ..raw.sizeof("int") * 2 + 1 + 20;
        // Take into account CompressionBlocks
        if (this.CompressionMethod != ..pakParser.CompressionMethod.none)
            this.StructSize += ..raw.sizeof("int") + #CompressionBlocks * 2 * ..raw.sizeof("long");
	};
	
	IsDeleted = function(){
		return (this.Flags & self.Flag_Deleted) == self.Flag_Deleted; 
	};
	
	IsEncrypted = function(){
		return (this.Flags & self.Flag_Encrypted) == self.Flag_Encrypted;
	}
	
	
}

namespace pakParser.FPakEntry{
	Flag_None = 0x00;
	Flag_Encrypted = 0x01;
	Flag_Deleted = 0x02;
	
	Align = function(ptr,alignment){
		return ptr + alignment - 1 & ~(alignment - 1); 
	}
	
	readArray = function(Ar,struct){
		var initialPos = Ar.offset;
        var dataPtr = self.FFrozenMemoryImagePtr(Ar);
        var arrayNum = Ar.readInt();
        var arrayMax = Ar.readInt();
        assert(arrayNum == arrayMax,"Num ({arrayNum}) != Max ({arrayMax})");
        
        if (arrayNum == 0) return {};
        
        var continuePos = Ar.offset;
        Ar.seek(initialPos + dataPtr.OffsetFromThis);
        var data = Ar.readArray(struct,arrayNum);
        Ar.seek(continuePos);
        return data;
	}
	
	FFrozenMemoryImagePtr = function(Ar){
		var a = Ar.readInt64();
    	var b = (a & 1) != 0;
    	var c = a >> 1;
		return {_packed = a;IsFrozen = b;OffsetFromThis = c;};
	}	
}
