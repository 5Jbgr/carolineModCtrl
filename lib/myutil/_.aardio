//myutil 工具库

namespace myutil{
	import debug.log;
	import crypt;
	hash_file=function(path){
		if(..io.exist(path,4)){
			var result,error_code=crypt().hashFile(path);
			return result:""; 
		}
		return ""; 
	}
	
	img_list={".jpg",".png",".jpeg",".bmp"}
	check_image=function(img){
		var ext=..io.splitpath(img).ext;
		return ..table.indexOf(img_list,..string.lower(ext)):false; 
	}
	
	import modSQL;
	_db=modSQL.get_mod_sql()
	add_image=function(p,imgs){
		var ims=..table.array();
		for(k,v in imgs){
			if(..io.exist(v,6) and check_image(v)){
				var hash=hash_file(v);
				var path=..io.splitpath(v);
				var id=_db.add_image({hash=hash;ext=path.ext});
				//console.log(id);
				..fsys.move(v,..io.joinpath(p,id++path.ext));
				..table.push(ims,id++path.ext);
			}
		}
		return ..string.join(ims,';'); 
	}
	
	before_quit=null;
	
	quit=null;
	
	_quit=function(){
		if(before_quit) before_quit();
		if(quit) quit();
	}
	
	import process.admin;
/*
	check_admin=..table.array();
	register_admin=function(f){
		debug.log.print("[myutil]:register admin function f:");
		debug.log.dump(f);
		if(type(f)===type.function) table.append(check_admin,f);
		else if(type(f)===type.boolean) table.append(check_admin,lambda() f);
		else{
			debug.log.print("[myutil]:register admin function fail");
			assert(false,"管理员检查函数注册失败");
		}
	}
*/
	check_admin={
		function(){
			import myutil.config;
			var ui=myutil.config.get_config().ui;
			return ui[["manage"]]=="symbolicLink" or ui[["import"]]=="symbolicLink"; 
		}	
	}
	
	set_admin=function(useAdmin=false){
		if(process.admin.isRunAs()) return false;
		for(k,v in check_admin){
			useAdmin=useAdmin or v();
			if(useAdmin) break;
		}
		if(useAdmin){
			process.admin.runas();
			_quit();
			return true;
		}
		return false;
	}
	
	import myutil.modCtl;
	import pakParser.PakFileReader;
	//解析pak并尝试获取其类别
	get_classification=function(path){
		if(not ..io.exist(path,4)) return null;
		var f = pakParser.PakFileReader(path);
		var r = f.Mount();
		f.close_file();
		var all = myutil.modCtl.get_category().get_feature();
		var count = {};
		var max = null; 
		for(k,_ in r){
			var cla = ..string.match(k,"<girl\d\d\d[a-z]?><_\d\d[a-z]?>?[_/\\]?=");
			if(cla and type(all[[cla]])!=type.null){
				var c = all[[cla]];
				count[c] = count[c]:0 + 1;
				if(max){
					if(count[c] > count[max]) max=c;
				}else max = c;
			}
			//..console.log(cla,all[[cla]]);
		}
		//..console.dump(count,..table.keys(r));
		return max; 
	}

}
