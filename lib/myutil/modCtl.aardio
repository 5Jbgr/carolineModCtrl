//modCtl 模组控制库
namespace myutil.modCtl;
import fsys.hardlink;
import web.json;
import myutil.dlg;
import myutil.config;
import debug.log;
_lang_config=null;
_config=null;
_get_lang=function(){
	if(not _lang_config){
		_lang_config=myutil.config.get_langconfig().get_other("modCtl");
		..table.mix(_lang_config,{
			path_not_found_error="路径不存在:{%s}";
		});
	}
	return _lang_config;
}
_get_config=function(){
	if(not _config){
		_config=myutil.config.get_config();
	}
	return _config;
}

//启用模组
enable_mod=function(from ,to ,ext=".pak"){
	if(from&&to){
	    if(..io.exist(from,4)){
	        if(..io.exist(to++ext)){
	            fsys.delete(to++ext);
	        }
	        if(_get_config().ui[["manage"]]==="hardlink"){
	        	fsys.hardlink.create(to++ext,from);
	        	return true;
	        }elseif(_get_config().ui[["manage"]]==="symbolicLink"){
	        	import process.popen;
	        	var prcs,e,ec = process.popen.cmd({"mklink",to++ext,from});
	        	if(e or ec){
	        		debug.log.printf("[modCtl]:[enable] could not create pipe with error:%s; error code:%d",e,ec);
	        		myutil.dlg.error_dlg("%s %d",e,ec);
	        		return false; 
	        	}else {
	        	    var r=true;
	        		for( all,out,err in prcs.each() ){
	        	    	debug.log.printf("[modCtl]:[enable] create symbolicLink response:%s",all);
	        	    	if(err&&err!==""){r=false;myutil.dlg.error_dlg("%s",e);}
	        		}
	        		return r; 
	        	}
	        }else {
	        	return fsys.copy(from,to++ext);
	        }
	    }
		myutil.dlg.error_dlg(_get_lang().path_not_found_error,from);
		return false; 
	}
}
//禁用模组
disable_mod=function(path,ext=".pak"){
	if(path){
		var true_path=path++ext;
		if(..io.exist(true_path)){
			return fsys.delete(true_path);
		}else {
			myutil.dlg.error_dlg(_get_lang().path_not_found_error,true_path);
		}
	}
	return false; 
}

remove_mod=function(path,install,trash){
	//..console.log(path,install,trash);
	if(path and ..io.exist(path)){
		if(trash){
			if(..io.exist(trash)){fsys.delete(trash);}
			fsys.createParentDir(trash,false);
			fsys.hardlink.create(trash,path);
		}
		fsys.delete(path);
	}
	if(install and ..io.exist(install)){
		fsys.delete(install);
	}
	return true; 
}

add_mod=function(from ,to ){
	if(_get_config().ui[["import"]]==="move"){
		return fsys.move(from,to);
	}elseif(_get_config().ui[["import"]]==="symbolicLink"){
	    import process.popen;
	    var prcs,e,ec = process.popen.cmd({"mklink",to,from});
	    if(e or ec){
	        debug.log.printf("[modCtl]:[add] could not create pipe with error:%s; error code:%d",e,ec);
	        myutil.dlg.error_dlg("%s %d",e,ec);
	        return false; 
	    }else {
	        var r=true;
	        for( all,out,err in prcs.each() ){
	        	debug.log.printf("[modCtl]:[add] create symbolicLink response:%s",all);
	        	if(err&&err!==""){r=false;myutil.dlg.error_dlg("%s",e);}
	        }
	        return r; 
	    }
	}else {
		return fsys.copy(from,to);
	}
}


category=null;
get_category=function(){
	if(not category){
		category=mod_category();
	}
	return category; 
}

reset_category_callback=null;
reset_category=function(){
	category=mod_category();
	if(reset_category_callback)reset_category_callback();
}


get_path=function(cat){
	return string.replace(cat,"-","\");
}



//模组分类
class mod_category {
	ctor(path="/config/category.json"){
	    //import console;
	    var _cat = null; 
	    var _tree = null; 
	    var _ids = null; 
	    var _feature = null; 
	    if(..io.exist(path)){	
	    	_cat=..web.json.parse(..string.load(path));
	    }else {
	    	myutil.dlg.error_dlg("no category.json");
	    	return ; 
	    }
	}
	
	_gen_tree=function(table_,cat_,root,feature_){
	    for(k,v in table_){
	    	var node={text=v.name;data=v;flag=cat_+'-'+v["id"]};
	    	//console.log(..table.tostring(node));
	    	..table.push(root,node);
	    	var a,b = ..table.find(v,lambda(val) ..table.isArray(val));
	    	//console.log(a,b)
	    	if(b){
	    		this._gen_tree(b,cat_+'-'+v["id"],node,(feature_:"")++(v.feature:""));
	    	}else {
	    	    var nowid=cat_+'-'+v["id"];
	    		..table.push(_ids,{name=root.data.name+'-'+v.name;id=nowid});
	    		if(#feature_)
	    			..table.assign(_feature,{[feature_++(v.feature:"")]=nowid});
	    	}
	    }
	}
	
	init=function(){
	    _tree = ..table.array();
	    _ids = ..table.array();
	    _feature = ..table.array();
	    for(k,v in _cat){
	    	var node = {text=v.name,data=v,flag=tostring(v.id)}; 
	    	//console.log(..table.tostring(node));
	    	..table.push(_tree,node);
	    	this._gen_tree(v.list,tostring(v.id),node,v.feature);
	    }
	    //..console.dump(_feature);
	}
	
	
	get_tree=function(){
	    if(not _tree){
	        this.init();
	    }
	    //console.log(..table.tostring(_ids));
	    return _tree; 
	}
	
	//{id:"";name:""}
	get_ids=function(){
	    if(not _ids){
	        this.init();
	    }
	    return _ids; 
	}
	
	get_cats=function(){
		return _cat;
	}
	
	//{name:id}
	get_feature=function(){
		return _feature; 
	}
	
	get_string=function(){
	    return table.tostring(_cat); 
	}
} 
